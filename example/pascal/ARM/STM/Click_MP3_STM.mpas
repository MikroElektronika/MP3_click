{*
Example for MP3 Click

    Date          : apr 2018.
    Author        : MikroE Team

Test configuration STM32 :
    
    MCU              : STM32F107VCT6
    Dev. Board       : EasyMx PRO v7 for STM32
    ARM Compiler ver : v6.0.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes SPI module and sets INT, RST and CS pin as OUTPUT and AN pin as INPUT
- Application Initialization - Initializes driver init, MP3 init and reset procedure. 
                               Standard configuration chip and set volume on the left and right channel.
                               Then initializes SD card and searching for songs on the SD card.
- Application Task - (code snippet) - Play audio, every 100 ms.

- note - In case the song crackles, increase the speed of the SPI
         Make sure that MMC card is properly formatted (to FAT16 or just FAT) before testing it on this example.
         Make sure that MMC card contains appropriate mp3 file ( sound.mp3 ).

*}
program Click_MP3_STM;

uses Click_MP3_types, Click_MP3_config;

const
    BYTES_2_WRITE : uint8_t = 32; 
    BUFFER_SIZE : uint16_t = 512; 
    
var
    Mmc_Chip_Select : sbit at GPIOD_ODR.B3; 
    mp3_filename : array[512] of uint8_t; 
    mp3_buffer : array[BUFFER_SIZE] of uint8_t; 
    file_size : uint32_t; 
    cnt : uint16_t; 
    
procedure mp3_setVolume(volumeLeft : uint8_t; volumeRight : uint8_t); 
var
    volume : uint16_t;
begin

    volume := ((volumeLeft shl 8) + volumeRight); 
    mp3_cmdWrite(_MP3_VOL_ADDR, volume); 

end;

procedure systemInit(); 
begin

    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_OUTPUT); 
    mikrobus_spiInit(_MIKROBUS1, @_MP3_SPI_CFG[0]); 
    mikrobus_logInit(_LOG_USBUART_A, 9600); 
    Delay_ms(100); 

end;

procedure applicationInit(); 
begin

    mp3_spiDriverInit(T_MP3_P(@_MIKROBUS1_GPIO), T_MP3_P(@_MIKROBUS1_SPI)); 
    mp3_init(); 
    mp3_reset(); 
    mp3_cmdWrite(_MP3_MODE_ADDR, 0x0800); 
    mp3_cmdWrite(_MP3_BASS_ADDR, 0x7A00); 
    mp3_cmdWrite(_MP3_CLOCKF_ADDR, 0x2000); 
    mp3_setVolume(0x2F, 0x2F); 
     mikrobus_logWrite(' --- Mmc (FAT) init start', _LOG_LINE);
    while ((0 <> Mmc_Fat_Init())) do
    begin
    end;
    while ((1 <> Mmc_Fat_Assign('sound.mp3', 0))) do
    begin
    end;
    mikrobus_logWrite(' --- Mmc (FAT) init done', _LOG_LINE);

end;

procedure applicationTask();
begin

    Mmc_Fat_Reset(file_size);
    mikrobus_logWrite(' --- Play audio.', _LOG_LINE);
    while ((file_size > BUFFER_SIZE)) do
    begin
        cnt := 0;
        while (cnt < BUFFER_SIZE) do
        begin
            Mmc_Fat_Read((mp3_buffer[cnt]));
            inc(cnt);
        end;
        cnt := 0;
        while (cnt < (BUFFER_SIZE / BYTES_2_WRITE)) do
        begin
            while (mp3_dataWrite32(@(mp3_buffer [cnt * BYTES_2_WRITE]))) do
            begin
            end;
            inc(cnt);
        end;
        file_size := (file_size - BUFFER_SIZE);
    end;
    cnt := 0;
    while (cnt < file_size) do
    begin
        Mmc_Fat_Read((mp3_buffer[cnt]));
        inc(cnt);
    end;
    cnt := 0;
    while (cnt < file_size) do
    begin
        while (mp3_dataWrite((mp3_buffer[cnt]))) do
        begin
        end;
        inc(cnt);
    end;
    mikrobus_logWrite(' --- Finish! ', _LOG_LINE);
    Delay_100ms();

end;

begin
    mp3_filename[0] := 's';
    mp3_filename[1] := 'o';
    mp3_filename[2] := 'u';
    mp3_filename[3] := 'n';
    mp3_filename[4] := 'd';
    mp3_filename[5] := '.';
    mp3_filename[6] := 'm';
    mp3_filename[7] := 'p';
    mp3_filename[8] := '3';
    mp3_filename[9] := 0;
    cnt := 0;

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;

end.